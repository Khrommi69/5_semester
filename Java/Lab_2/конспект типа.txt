//в проге может быть только один публичный класс и он должен совпадать с именем файла
//остальные классы не могут быть public (private & protected вообще ни какой класс быть не может)
//есть ещё модификаторы доступа: abstract, final, strictfp
//strictfp - во всех методах класса более точно работает с типом float (на практике пригождается оч редко)
//abstract - мы не можем создать экземпляр класса (объект). Абстрактные классы это классы, которые как бы без тела описвают абстрактные вещи, для дальнейшей конкретизации, реализации этих абстрактных вещей при наследовании этого калсса
//абстрактный класс это класс у которого есть абстаркнтый метод
//final - модификатор говорит о том что мы не можем наслежовать калсс с этим модификатором
//abstract & final - не могут быть объявлены в одном классе (abstract final class SomeClass)
//с точки зрения эстетичности (ну или красивого когда или как там) правильно сперва писать модификатор доступа (private, public, protected), а потом уже писать остальные модификаторы

//интерфесы: это стопроцентный абстрактный класс
//public interface ISomeInterface {}     (можно сделать доступ по умолчанию или паблик (private, protected запрещены))
//мы можем писать методы в интерфейсах, наследовать их (extend)
//в интерфесах абсолютно все методы должны быть абстрактными
//интерфей используется для описания какого нибудь поведения
//классы используются для описания объектов, поэтому делать полностью абстрактный класс глупо, ведь сделать интерфейс проще
//интерфейс может быть с модификатором strictfp. Можно написать abstract но это не имеет смысла
//в инетрфейсах могут быть методы без тела и константы
//все методы публичны и абстрактны по умолчанию, (писать что они abstract public не имеет смысла)
//с константами тож самое (константы пишутся так: SOME_CONSTANT), public static final писать перед типом данных не надо, не имеет смылса, все переменные в интерфейсах и так являются константами
//классы не экстендятся а имплементятся)
//class Example implements ISomeInterface {}
// implemetить можно несколько инетрфейсов через запятую

//Модификаторы доступа
//public, по умолчанию (default), protected и private
//public - переменную видно везде
//по умолчанию (без модификатора доступа) переменную видно в самом классе, в пакете в котором этот класс находится
//protected переменную видно в пакете в котором она находится, видно в классах наследниках ну и разумеется в самом классе
//private переменную видно только в области класса

//static
//(static методы работают только со статическими переменными)
//static переменные это переменные на уровне класса
//то есть мы не можем создать много объектов и присваивать статической переменной разные значения для разных объектов
//static переменные общие для всех объектов
//можно даже не создавать объект а обращаться к статической переменной через имя класса (SomeClass.staticVariable




//Вариант 11
//кол-во буферов - 3
//Типы элементов буфера - long
//Число элементов в буферах - 90
//Сортировка - пузырька
//Вычисление - max
//Сохранение - Save one line