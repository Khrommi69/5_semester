JQuery [13] – кросс-браузерная JavaScript библиотека, предназначенная для упрощения разработки сценариев на стороне клиента.

jQuery - это популярная библиотека JavaScript, которая облегчает работу с элементами HTML, обработку событий и создание
анимации на веб-страницах. Однако у нее есть и недостатки.
Один из недостатков jQuery - это большое количество устаревшего кода (legacy code). Большинство проектов на jQuery
сейчас - это старый код, который сложнее поддерживать.
Кроме того, современные браузеры и стандарты JavaScript предлагают многие из функций, которые раньше были доступны
только через jQuery. Это означает, что во многих случаях можно использовать нативный JavaScript вместо jQuery.

Ключевые возможности jQuery:
x Простой и мощный выбор элементов DOM с помощью кроссбраузерной библиотеки Sizzle (часть проекта JQuery);
x Возможность обхода и модификаций узлов DOM (включая поддержку CSS 1-3);
x Возможность создания и обработки событий;
x Возможность использования эффектов и анимации;
x Упрощение работы с AJAX;
x Встроенный парсер JSON;
x Возможность создания собственных расширений с помощью подключаемых модулей.
Использование JQuery позволяет отделить логику WEB-приложения на
клиентской стороне от HTML-кода, подобно тому, как CSS отделяет визуализацию от HTML.

ПРИМЕР ПОДКЛЮЧЕНИЯ jQuerry
<script src="js/jquery.js" type="text/javascript"></script>

jQuery() ( $() ) - основная функция библиотеки. 
$(селектор).действие()
селекторы jQuerry основаны на селекторах css для выбора элемента из HTML
действие() – это методы jQuery, которые должны быть выполнены над выбранными элементами.
Функция jQuery() позволяет производить поиск элементов на странице, создавать новые элементы по заданному HTML тексту и т.п.
Возвращает эта функция объект jQuery – javascript объект, который содержит коллекцию выбранных элементов страницы, а
так же обладает множеством методов jQuery для работы с ними

в jQuery есть метод ready, вызов которого осуществляется в момент готовности дерева DOM:
(обычный js ждет пока прогрузится страница, а тут скрипт прогружается вместе с DOM и не дожидается прогрузки например изображений)
$(document).ready( function(){
 // вызов нужных функций скрипта
});

вызовы jQuerry можно связывать в цепочки - это очень удобно
Такие цепочки могут состоять из большого числа методов.
Для улучшения читабельности кода, каждый вызов метода в цепочке рекомендуется писать с новой строки:
$("div") // найдем все div-элементы
 .parent() // найдем их родительские элементы
 .css("heigth", "10px") // установим последним высоту в 10 пикселей
 .fadeTo(0, 0.5) // установим им прозрачность в 50%

расширить выборку элементов можно с использованием метода add()
// добавить к четным изображениям изображения, содержащие заданные подстроки в src, а также и все элементы label
var labelElems = document.getElementsByTagName("label");
var jq = $('img[src*=sevsu]');
$('img:even').add('img[src*=is]').add(jq).add(labelElems).css("border", "thick double red");

Сократить выборку с применением фильтра возможно с использованием метода filter

Метод get(индекс), работает так же, как прямой доступ
alert( $('body').get(0) ); // BODY

Метод eq(индекс) возвращает коллекцию из одного элемента – с данным номером
// DOM-элемент для первой ссылки
$('a').get(0);
// jQuery-объект из одного элемента: первой ссылки
$('a').eq(0);

Для управления классами элементов в jQuery могут быть использованы такие функции как
x addClass(name name) – добавляет ко всем элементам в объекте
jQuery указанный класс.
x removeClass(name name) – удаляет классы в объекте jQuery.
x toggleClass(name) – добавляет или удаляет класс (в зависимости
от их наличия).
Определить наличие класса у элемента можно при помощи метода hasClass

jQuery также предоставляет набор методов, которые упрощают работу с CSS:
css(name)
Получает значение указанного свойства первого элемента в объекте jQuery
css(name, value)
Устанавливает значение для указанного свойства для всех элементов в объекте jQuery
css(map)
Устанавливает несколько свойств для всех элементов в объекте jQuery при помощи объекта
css(name, function)
Устанавливает значение для указанного свойства для всех элементов в объекте jQuery с использованием функции

можно создать новые элементы, если добавить строку HTML фрагмента в $() функцию.
Для добавления в DOM дерево используются: append, prepend, appendTo, prependTo
var newElems = $('<div class="dcell"><img src="lily.png"/></div>');
$('#row1').append(newElems);

Помимо добавления существует возможность также и замены элементов (функции replaceWith, replaceAll),
удаления (функции empty, remove).

Для получения/изменения содержимого текстового узла элемента, html-кода элемента или значения
поля формы используются следующие функции:
x text() – задает или возвращает текстовое содержимое выбранных
элементов;
x html() – задает или возвращает содержание отдельных элементов
(включая HTML разметку);
x val() – задает или возвращает значение поля формы

jQuery облегчает использование обработчиков событий JavaScript и расширяет их функциональность.
$(селектор).обработчик_события(function(){код_обработчика_события});

эквиваленты DOM-событий в качестве jQuery методов:
События: мыши         клавиатуры   форм      окна/документа
         Click        keypress     Submit    load
         Dblclick     keydown      change    resize
         mouseenter   keyup        focus     scroll
         mouseleave                blur      unload

метод one() позволяет создавать обработчики, которые срабатывают только один раз, метод toggle() позволяет переключаться между
различными обработчиками событий при щелчке мышью и тп.
$( "#target" ).toggle(function() {
 alert( "Первый обработчик .toggle() вызван." );
}, function() {
 alert( "Второй обработчик .toggle() вызван." );
});


В библиотеку jQuery включены различные эффекты и возможность создания и управления анимацией. 
hide()   Прячет все элементы в объекте jQuery                  
show()   Показывает все элементы в объекте jQuery                  
toggle() Меняет (переключает) видимость всех элементов в объекте jQuery   
//аргументы time (определенный период времени), easing (скорость анимации), function (действия после завершения анимации)
доп. toggle(boolean) Переключает видимость всех элементов в объекте jQuery в соответствии с аргументом

Для эффектов скольжения: slideDown, slideUp ф-ции
для эффетов появления/исчезновения (изменения прозрачности): fadeIn и fadeOut ф-ции






